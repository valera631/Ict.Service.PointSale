// <auto-generated />
using System;
using Ict.Service.PointSale.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ict.Service.PointSale.DataBase.Migrations
{
    [DbContext(typeof(PointSaleDbContext))]
    [Migration("20250806095054_addAdmin")]
    partial class addAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryPointSalePointSaleEntity", b =>
                {
                    b.Property<int>("CategoryPointSalesCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationsPointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryPointSalesCategoryId", "OrganizationsPointSaleId");

                    b.HasIndex("OrganizationsPointSaleId");

                    b.ToTable("CategoryPointSalePointSaleEntity");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.AlternativeWord", b =>
                {
                    b.Property<Guid>("AlternativeWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeWordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlternativeWordId");

                    b.HasIndex("PointSaleId");

                    b.ToTable("AlternativeWords");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.CategoryPointSale", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("CategoryPointSales");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Chief", b =>
                {
                    b.Property<Guid>("ChiefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChiefName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChiefPositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAproved")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("OpenDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChiefId");

                    b.HasIndex("ChiefPositionId");

                    b.HasIndex("OpenDate");

                    b.HasIndex("PointSaleId");

                    b.ToTable("Chiefs");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.ChiefPosition", b =>
                {
                    b.Property<int>("ChiefPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChiefPositionId"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ChiefPositionId");

                    b.ToTable("ChiefPositions");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.ClosingStatus", b =>
                {
                    b.Property<int>("ClosingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClosingStatusId"));

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClosingStatusId");

                    b.ToTable("ClosingStatuses");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.CreationType", b =>
                {
                    b.Property<int>("CreationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreationTypeId"));

                    b.Property<string>("CreationTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreationTypeId");

                    b.ToTable("CreationTypes");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Description", b =>
                {
                    b.Property<Guid>("DescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("OpenDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DescriptionId");

                    b.HasIndex("OpenDate");

                    b.HasIndex("PointSaleId");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAproved")
                        .HasColumnType("bit");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<DateOnly>("OpenDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LocationId");

                    b.HasIndex("OpenDate");

                    b.HasIndex("PointSaleId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Logo", b =>
                {
                    b.Property<Guid>("LogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("OpenDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogoId");

                    b.HasIndex("OpenDate");

                    b.HasIndex("PointSaleId");

                    b.ToTable("Logos");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Operator", b =>
                {
                    b.Property<Guid>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperatorId");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.OrganizationType", b =>
                {
                    b.Property<int>("OrganizationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationTypeId"));

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationTypeId");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.OwnerType", b =>
                {
                    b.Property<int>("OwnerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerTypeId"));

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerTypeId");

                    b.ToTable("OwnerTypes");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PendingVerification", b =>
                {
                    b.Property<Guid>("PointSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PointSaleId");

                    b.ToTable("PendingVerifications");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Photo", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoId");

                    b.HasIndex("PointSaleId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PointSaleActivity", b =>
                {
                    b.Property<Guid>("PointSaleActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EnglishNamePointSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NamePointSale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("OpenDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PointSaleActivityId");

                    b.HasIndex("PointSaleId");

                    b.ToTable("PointSaleActivities");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", b =>
                {
                    b.Property<Guid>("PointSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("ClosingDate")
                        .HasColumnType("date");

                    b.Property<int?>("ClosingStatusId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int>("CreationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAproved")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("PointSaleId");

                    b.HasIndex("ClosingStatusId");

                    b.HasIndex("CreationTypeId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("PointSales");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PointSaleSchedule", b =>
                {
                    b.Property<Guid>("PointSaleScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("BreakEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("BreakStartTime")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsWorkingDay")
                        .HasColumnType("bit");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("PointSaleScheduleId");

                    b.HasIndex("PointSaleId");

                    b.ToTable("PointSaleSchedules");
                });

            modelBuilder.Entity("OperatorPointSaleEntity", b =>
                {
                    b.Property<Guid>("OperatorsOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PointsSalePointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperatorsOperatorId", "PointsSalePointSaleId");

                    b.HasIndex("PointsSalePointSaleId");

                    b.ToTable("OperatorPointSaleEntity");
                });

            modelBuilder.Entity("CategoryPointSalePointSaleEntity", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.CategoryPointSale", null)
                        .WithMany()
                        .HasForeignKey("CategoryPointSalesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsPointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.AlternativeWord", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSale")
                        .WithMany("AlternativeWords")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointSale");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Chief", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.ChiefPosition", "ChiefPosition")
                        .WithMany("Chiefs")
                        .HasForeignKey("ChiefPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSale")
                        .WithMany("Chiefs")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChiefPosition");

                    b.Navigation("PointSale");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Description", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSale")
                        .WithMany("Descriptions")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointSale");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Location", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSale")
                        .WithMany("Locations")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointSale");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Logo", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSale")
                        .WithMany("Logos")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointSale");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.Photo", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSale")
                        .WithMany("Photos")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointSale");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PointSaleActivity", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSales")
                        .WithMany("PointSaleActivities")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointSales");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.ClosingStatus", "ClosingStatus")
                        .WithMany("PointSales")
                        .HasForeignKey("ClosingStatusId");

                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.CreationType", "CreationType")
                        .WithMany("PointSales")
                        .HasForeignKey("CreationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.OrganizationType", "OrganizationType")
                        .WithMany("PointSales")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.OwnerType", "OwnerType")
                        .WithMany("PointSales")
                        .HasForeignKey("OwnerTypeId");

                    b.Navigation("ClosingStatus");

                    b.Navigation("CreationType");

                    b.Navigation("OrganizationType");

                    b.Navigation("OwnerType");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PointSaleSchedule", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", "PointSale")
                        .WithMany("PointSaleSchedules")
                        .HasForeignKey("PointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointSale");
                });

            modelBuilder.Entity("OperatorPointSaleEntity", b =>
                {
                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.Operator", null)
                        .WithMany()
                        .HasForeignKey("OperatorsOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", null)
                        .WithMany()
                        .HasForeignKey("PointsSalePointSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.ChiefPosition", b =>
                {
                    b.Navigation("Chiefs");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.ClosingStatus", b =>
                {
                    b.Navigation("PointSales");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.CreationType", b =>
                {
                    b.Navigation("PointSales");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.OrganizationType", b =>
                {
                    b.Navigation("PointSales");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.OwnerType", b =>
                {
                    b.Navigation("PointSales");
                });

            modelBuilder.Entity("Ict.Service.PointSale.DataBase.DBModels.PointSaleEntity", b =>
                {
                    b.Navigation("AlternativeWords");

                    b.Navigation("Chiefs");

                    b.Navigation("Descriptions");

                    b.Navigation("Locations");

                    b.Navigation("Logos");

                    b.Navigation("Photos");

                    b.Navigation("PointSaleActivities");

                    b.Navigation("PointSaleSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
